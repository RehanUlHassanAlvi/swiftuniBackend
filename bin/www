const path = require("path");
require("dotenv").config({ path: path.resolve(__dirname, "..", ".env") });
var http = require("http");
var https = require("https");
const fs = require("fs");
const app = require("../app");
require("../scheduler/scheduler");
let {
  server: { port },
} = require("../conf/config");
port = normalizePort(port);
app.set("port", port);
const server = app.listen(port);
server.on("error", onError);
server.on("listening", onListening);

function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }
  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}
/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  //debug("Listening on " + bind);
  // console.log("server is runing on " + addr.port);
  console.log(`
               ------  Swift Uni BACKEND : ${addr.port}  ------
                `);
}
